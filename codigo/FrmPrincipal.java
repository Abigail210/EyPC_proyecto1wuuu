/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;

/**
 *
 * @author miran
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    private void analizarLexico() throws IOException{
        int cont=1;
        String expr=(String)txtResultado.getText();
        Lexer lexer =new Lexer(new StringReader(expr));
        String resultado="LINEA "+cont+"\n";
        while(true){
            Tokens token=lexer.yylex();
            if(token==null){
                txtAnalizarLex.setText(resultado);
                return;
            }
            switch (token) {
                    case ERROR:
                        resultado+="simbolo no definido\n";
                        break;
                    case Org:
                        resultado+="ORG";
                        break;
                    case Equ:
                        resultado+="EQU\n";
                        break;
                    case Fcb:
                        resultado+="FCB\n";
                        break;
                    case End:
                        resultado+="END\n";
                        break;
                    case Comentario:
                        resultado+="comentario : "+lexer.lexeme+"\n";
                        break;
                    case Etiq_Var_Instrucc:
                        resultado+="etiqueta, variable o instruccion: "+lexer.lexeme+"\n";
                        break;
                    case NumeroHexaIMM:
                        resultado+="Operando hexa imm: "+lexer.lexeme+"\n";
                        break;
                    case NumeroDecIMM:
                        resultado+="Operando deci imm: "+lexer.lexeme+"\n";
                        break;
                    case CharIMM:
                        resultado+="caracter imm: "+lexer.lexeme+"\n";
                        break;
                    case NumeroHexaDIR:
                        resultado+="Operando hexa dir: "+lexer.lexeme+"\n";
                        break;
                    case NumeroDecDIR_EXT:
                        resultado+="Operando deci dir o ext: "+lexer.lexeme+"\n";
                        break;
                    case NumeroHexaEXT:
                        resultado+="Operando hexa ext: "+lexer.lexeme+"\n";
                        break;
                    case NumeroHexaINDX:
                        resultado+="Operando hexa indx: "+lexer.lexeme+"\n";
                        break;
                    case NumeroHexaINDY:
                        resultado+="Operando hexa indy: "+lexer.lexeme+"\n";
                        break;
                    case Espacio:
                        resultado+=" espacio ";
                        break;
                    case Org_Equ:
                        resultado+=" Oper_directiva: "+lexer.lexeme+"\n";
                        break;
                    case Linea:
                        cont++;
                        resultado+="\nLINEA "+cont+"\n";
                        break;
                    default:
                        resultado+="Token: "+token+"\n";
                        break;
                }
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnArchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        btnAnalizarLex = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAnalizarLex = new javax.swing.JTextArea();
        btnAnalizarSin = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAnalizarSin = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnArchivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnArchivo.setText("abrir archivo");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        btnAnalizarLex.setText("analizar");
        btnAnalizarLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarLexActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        txtAnalizarLex.setEditable(false);
        txtAnalizarLex.setColumns(20);
        txtAnalizarLex.setRows(5);
        jScrollPane2.setViewportView(txtAnalizarLex);

        btnAnalizarSin.setText("analizar");
        btnAnalizarSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarSinActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");

        txtAnalizarSin.setColumns(20);
        txtAnalizarSin.setRows(5);
        jScrollPane3.setViewportView(txtAnalizarSin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 62, Short.MAX_VALUE)
                                .addComponent(btnAnalizarLex)
                                .addGap(302, 302, 302)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAnalizarSin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnArchivo)
                    .addComponent(btnAnalizarLex)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizarSin)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
//        File archivo=new File("archivo.txt");
//        PrintWriter escribir;
//        try {
//            escribir=new PrintWriter(archivo);
//            escribir.print(txtEntrada.getText());
//            escribir.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
         
        JFileChooser chooser=new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo=new File(chooser.getSelectedFile().getAbsolutePath());
        
        
        try {
            String ST=new String(Files.readAllBytes(archivo.toPath()));
            txtResultado.setText(ST);
                    
//                    
//            Reader lector=new BufferedReader(new FileReader(chooser.getSelectedFile()));
//            Lexer lexer=new Lexer(lector);
//            String resultado="";
//            while(true){
//                Tokens tokens=lexer.yylex();
//                if(tokens==null){
//                    resultado+="fin";
//                    txtResultado.setText(resultado);
//                    return;
//                }
//                switch (tokens) {
//                    case ERROR:
//                        resultado+="simbolo no definido\n";
//                        break;
//                    case Org:
//                        resultado+="ORG";
//                        break;
//                    case Equ:
//                        resultado+="EQU\n";
//                        break;
//                    case Fcb:
//                        resultado+="FCB\n";
//                        break;
//                    case End:
//                        resultado+="END\n";
//                        break;
//                    case Comentario:
//                        resultado+="comentario : "+lexer.lexeme+"\n";
//                        break;
//                    case Etiq_Var_Instrucc:
//                        resultado+="etiqueta, variable o instruccion: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroHexaIMM:
//                        resultado+="Operando hexa imm: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroDecIMM:
//                        resultado+="Operando deci imm: "+lexer.lexeme+"\n";
//                        break;
//                    case CharIMM:
//                        resultado+="caracter imm: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroHexaDIR:
//                        resultado+="Operando hexa dir: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroDecDIR_EXT:
//                        resultado+="Operando deci dir o ext: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroHexaEXT:
//                        resultado+="Operando hexa ext: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroHexaINDX:
//                        resultado+="Operando hexa indx: "+lexer.lexeme+"\n";
//                        break;
//                    case NumeroHexaINDY:
//                        resultado+="Operando hexa indy: "+lexer.lexeme+"\n";
//                        break;
//                    case Espacio:
//                        resultado+=" espacio ";
//                        break;
//                    case Org_Equ:
//                        resultado+=" directiva "+lexer.lexeme+"\n";
//                        break;
//                    default:
//                        resultado+="Token: "+tokens+"\n";
//                        break;
//                }
//            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void btnAnalizarLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarLexActionPerformed
        try {
           
            analizarLexico();
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarLexActionPerformed

    private void btnAnalizarSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarSinActionPerformed
        String ST=txtResultado.getText();
        Sintax s=new Sintax(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txtAnalizarSin.setText("analisis correcto");
            txtAnalizarSin.setForeground(new Color(25,111,61));
        } catch (Exception ex) {
            Symbol sym=s.getS();
            txtAnalizarSin.setText("ERROR de sintaxis. Linea "+(sym.right+1)+" columna: "+(sym.left+1)+", texto \">"+sym.value+"<\"");
            txtAnalizarSin.setForeground(Color.red);
        }
        
        
    }//GEN-LAST:event_btnAnalizarSinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizarLex;
    private javax.swing.JButton btnAnalizarSin;
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAnalizarLex;
    private javax.swing.JTextArea txtAnalizarSin;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
